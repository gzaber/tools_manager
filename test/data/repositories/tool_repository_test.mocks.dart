// Mocks generated by Mockito 5.1.0 from annotations
// in tools_manager/test/data/repositories/tool_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tools_manager/data/datasources/i_tool_datasource.dart' as _i2;
import 'package:tools_manager/data/models/tool_model.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [IToolDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIToolDataSource extends _i1.Mock implements _i2.IToolDataSource {
  MockIToolDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addTool(_i4.ToolModel? toolModel) =>
      (super.noSuchMethod(Invocation.method(#addTool, [toolModel]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> updateTool(_i4.ToolModel? toolModel) =>
      (super.noSuchMethod(Invocation.method(#updateTool, [toolModel]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteTool(String? id) =>
      (super.noSuchMethod(Invocation.method(#deleteTool, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<_i4.ToolModel?> getToolById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getToolById, [id]),
              returnValue: Future<_i4.ToolModel?>.value())
          as _i3.Future<_i4.ToolModel?>);
  @override
  _i3.Future<_i4.ToolModel?> getToolByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#getToolByName, [name]),
              returnValue: Future<_i4.ToolModel?>.value())
          as _i3.Future<_i4.ToolModel?>);
  @override
  _i3.Future<List<_i4.ToolModel>> getAllTools() =>
      (super.noSuchMethod(Invocation.method(#getAllTools, []),
              returnValue: Future<List<_i4.ToolModel>>.value(<_i4.ToolModel>[]))
          as _i3.Future<List<_i4.ToolModel>>);
  @override
  _i3.Future<List<_i4.ToolModel>> getToolsByGiver(String? giver) =>
      (super.noSuchMethod(Invocation.method(#getToolsByGiver, [giver]),
              returnValue: Future<List<_i4.ToolModel>>.value(<_i4.ToolModel>[]))
          as _i3.Future<List<_i4.ToolModel>>);
  @override
  _i3.Future<List<_i4.ToolModel>> getToolsByHolder(String? holder) =>
      (super.noSuchMethod(Invocation.method(#getToolsByHolder, [holder]),
              returnValue: Future<List<_i4.ToolModel>>.value(<_i4.ToolModel>[]))
          as _i3.Future<List<_i4.ToolModel>>);
  @override
  _i3.Future<List<_i4.ToolModel>> getToolsByReceiver(String? receiver) =>
      (super.noSuchMethod(Invocation.method(#getToolsByReceiver, [receiver]),
              returnValue: Future<List<_i4.ToolModel>>.value(<_i4.ToolModel>[]))
          as _i3.Future<List<_i4.ToolModel>>);
  @override
  _i3.Future<List<_i4.ToolModel>> getToolsInStockByUser(String? username) =>
      (super.noSuchMethod(Invocation.method(#getToolsInStockByUser, [username]),
              returnValue: Future<List<_i4.ToolModel>>.value(<_i4.ToolModel>[]))
          as _i3.Future<List<_i4.ToolModel>>);
  @override
  _i3.Future<List<_i4.ToolModel>> getPendingTools() =>
      (super.noSuchMethod(Invocation.method(#getPendingTools, []),
              returnValue: Future<List<_i4.ToolModel>>.value(<_i4.ToolModel>[]))
          as _i3.Future<List<_i4.ToolModel>>);
  @override
  _i3.Future<List<_i4.ToolModel>> searchToolsByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#searchToolsByName, [name]),
              returnValue: Future<List<_i4.ToolModel>>.value(<_i4.ToolModel>[]))
          as _i3.Future<List<_i4.ToolModel>>);
  @override
  _i3.Future<int> countToolsInStockByUser(String? username) => (super
      .noSuchMethod(Invocation.method(#countToolsInStockByUser, [username]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<int> countTransferredToolsByUser(String? username) => (super
      .noSuchMethod(Invocation.method(#countTransferredToolsByUser, [username]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<int> countReceivedToolsByUser(String? username) => (super
      .noSuchMethod(Invocation.method(#countReceivedToolsByUser, [username]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<int> countPendingTools() =>
      (super.noSuchMethod(Invocation.method(#countPendingTools, []),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
}
