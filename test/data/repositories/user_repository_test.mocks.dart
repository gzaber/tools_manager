// Mocks generated by Mockito 5.1.0 from annotations
// in tools_manager/test/data/repositories/user_repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tools_manager/data/datasources/i_user_datasource.dart' as _i2;
import 'package:tools_manager/data/models/user_model.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [IUserDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockIUserDataSource extends _i1.Mock implements _i2.IUserDataSource {
  MockIUserDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addUser(_i4.UserModel? userModel) =>
      (super.noSuchMethod(Invocation.method(#addUser, [userModel]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> updateUser(_i4.UserModel? userModel) =>
      (super.noSuchMethod(Invocation.method(#updateUser, [userModel]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteUser(String? id) =>
      (super.noSuchMethod(Invocation.method(#deleteUser, [id]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);
  @override
  _i3.Future<_i4.UserModel?> getUserById(String? id) =>
      (super.noSuchMethod(Invocation.method(#getUserById, [id]),
              returnValue: Future<_i4.UserModel?>.value())
          as _i3.Future<_i4.UserModel?>);
  @override
  _i3.Future<_i4.UserModel?> getUserByMobileNumber(String? mobileNumber) =>
      (super.noSuchMethod(
              Invocation.method(#getUserByMobileNumber, [mobileNumber]),
              returnValue: Future<_i4.UserModel?>.value())
          as _i3.Future<_i4.UserModel?>);
  @override
  _i3.Future<_i4.UserModel?> getUserByName(String? username) =>
      (super.noSuchMethod(Invocation.method(#getUserByName, [username]),
              returnValue: Future<_i4.UserModel?>.value())
          as _i3.Future<_i4.UserModel?>);
  @override
  _i3.Future<List<_i4.UserModel>> getAllUsers() =>
      (super.noSuchMethod(Invocation.method(#getAllUsers, []),
              returnValue: Future<List<_i4.UserModel>>.value(<_i4.UserModel>[]))
          as _i3.Future<List<_i4.UserModel>>);
  @override
  _i3.Future<List<_i4.UserModel>> getUsersByRole(String? role) =>
      (super.noSuchMethod(Invocation.method(#getUsersByRole, [role]),
              returnValue: Future<List<_i4.UserModel>>.value(<_i4.UserModel>[]))
          as _i3.Future<List<_i4.UserModel>>);
  @override
  _i3.Future<int> countAllUsers() =>
      (super.noSuchMethod(Invocation.method(#countAllUsers, []),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
  @override
  _i3.Future<int> countUsersByRole(String? role) =>
      (super.noSuchMethod(Invocation.method(#countUsersByRole, [role]),
          returnValue: Future<int>.value(0)) as _i3.Future<int>);
}
